package ir.ac.sbu.lexical;/* The following code was generated by JFlex 1.6.1 */

import ir.ac.sbu.syntax.Lexical;

import java.io.IOException;
import java.util.HashSet;
/*user codes */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/yalda/projects/JustForExcersise/Compilers/phase2/tmp/myProj/src/main/java/ir/ac/sbu/lexical/scanner.jflex</tt>
 */
public class Scanner implements Lexical {


  private MySymbol currentSymbol = null;

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 2;
  public static final int STRING = 4;
  public static final int SINGLE_COMMENT = 6;
  public static final int MULT_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\22\1\0\1\23\1\21\22\0\1\23\1\32\1\24"+
    "\1\30\1\0\1\47\1\36\1\63\1\54\1\55\1\46\1\17\1\56"+
    "\1\3\1\12\1\50\1\4\11\20\1\57\1\60\1\33\1\31\1\34"+
    "\2\0\4\11\1\16\1\14\5\2\1\6\16\2\1\61\1\26\1\62"+
    "\1\40\1\1\1\0\1\41\1\51\1\65\1\43\1\15\1\13\1\52"+
    "\1\72\1\53\1\2\1\70\1\5\1\2\1\42\1\44\1\73\1\2"+
    "\1\45\1\67\1\27\1\64\1\66\1\71\1\7\1\2\1\74\1\0"+
    "\1\37\1\0\1\35\u05e1\0\12\10\206\0\12\10\306\0\12\10\u019c\0"+
    "\12\10\166\0\12\10\166\0\12\10\166\0\12\10\166\0\12\10\166\0"+
    "\12\10\166\0\12\10\166\0\12\10\166\0\12\10\166\0\12\10\140\0"+
    "\12\10\166\0\12\10\106\0\12\10\u0116\0\12\10\106\0\12\10\u0746\0"+
    "\12\10\46\0\12\10\u012c\0\12\10\200\0\12\10\246\0\12\10\6\0"+
    "\12\10\266\0\12\10\126\0\12\10\206\0\12\10\6\0\12\10\u89c6\0"+
    "\12\10\u02a6\0\12\10\46\0\12\10\306\0\12\10\26\0\12\10\126\0"+
    "\12\10\u0196\0\12\10\u5316\0\12\10\u0586\0\12\10\u0bbc\0\12\10\200\0"+
    "\12\10\74\0\12\10\220\0\12\10\u0116\0\12\10\u01d6\0\12\10\u0176\0"+
    "\12\10\146\0\12\10\u0216\0\12\10\u5176\0\12\10\346\0\12\10\u6c74\0"+
    "\62\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\2\1\5\2\2"+
    "\1\6\1\4\2\7\1\10\1\2\1\1\1\11\1\1"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\5\2\1\20"+
    "\1\21\1\22\2\2\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\5\2\1\33\1\1\1\34\1\33"+
    "\1\35\1\1\1\33\1\36\1\33\1\1\1\37\1\33"+
    "\1\40\1\0\1\41\1\0\1\4\1\0\1\42\1\0"+
    "\10\2\1\43\1\44\1\2\1\45\1\46\1\47\1\50"+
    "\1\51\6\2\1\52\1\53\1\2\1\54\1\55\1\56"+
    "\1\57\3\2\1\60\1\61\11\2\1\33\1\62\1\63"+
    "\1\42\1\0\1\42\1\0\1\64\1\65\3\2\1\66"+
    "\2\2\1\67\1\2\1\70\1\2\1\71\1\72\10\2"+
    "\1\73\12\2\1\0\1\63\2\0\4\2\1\74\1\75"+
    "\1\76\11\2\1\77\2\2\1\100\3\2\1\63\2\0"+
    "\1\101\7\2\1\102\1\103\1\104\1\105\1\2\1\106"+
    "\3\2\1\63\3\2\1\107\1\110\1\111\1\2\1\112"+
    "\1\113\1\2\1\114\1\2\1\115\1\2\1\116\1\117"+
    "\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u0131\0\u0131\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u0131\0\u0131\0\u0131\0\u0131\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u0131\0\u0131"+
    "\0\u0131\0\u0131\0\u0131\0\u0131\0\u07a0\0\u0131\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u0131\0\u090e\0\u0131\0\u094b\0\u0131"+
    "\0\u0988\0\u09c5\0\u0131\0\u0a02\0\u0a3f\0\u0131\0\u0a7c\0\u0131"+
    "\0\u0262\0\u0131\0\u0ab9\0\u0131\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0131"+
    "\0\u0131\0\u0d95\0\u0131\0\u0131\0\u0131\0\u0131\0\u0131\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u016e\0\u016e\0\u0f40"+
    "\0\u0131\0\u0131\0\u0131\0\u0131\0\u0f7d\0\u0fba\0\u0ff7\0\u016e"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u0131\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u13c7\0\u016e\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u016e\0\u1572\0\u016e\0\u15af\0\u016e\0\u016e\0\u15ec"+
    "\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u016e"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u0988\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u016e\0\u016e\0\u016e\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u016e\0\u1e06"+
    "\0\u1e43\0\u016e\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u138a"+
    "\0\u016e\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u215c\0\u016e\0\u2199\0\u21d6"+
    "\0\u2213\0\u0131\0\u2250\0\u228d\0\u22ca\0\u016e\0\u016e\0\u016e"+
    "\0\u2307\0\u016e\0\u016e\0\u2344\0\u016e\0\u2381\0\u016e\0\u23be"+
    "\0\u016e\0\u016e\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\6\1\7\1\10\1\11\1\12\2\7\1\6\1\7"+
    "\1\13\1\14\1\7\1\15\1\7\1\16\1\17\1\20"+
    "\2\21\1\22\1\21\1\6\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\7"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\3\7\1\63\1\7"+
    "\21\64\2\6\1\64\2\6\1\65\34\64\1\66\11\64"+
    "\21\67\2\6\1\67\1\70\1\6\1\71\34\67\1\6"+
    "\11\67\22\72\1\73\52\72\21\74\1\75\1\76\2\74"+
    "\1\76\2\74\1\77\44\74\76\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\3\7\10\0\11\7\3\0\1\100"+
    "\1\11\5\0\1\101\5\0\1\17\10\0\1\102\47\0"+
    "\1\103\2\104\1\105\2\0\1\106\2\0\2\107\1\0"+
    "\1\103\55\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\2\7\1\110\1\7\1\0\1\7\6\0\1\7\11\0"+
    "\3\7\1\111\1\7\3\0\3\7\10\0\11\7\4\0"+
    "\1\106\13\0\1\106\55\0\2\7\1\0\1\7\1\112"+
    "\2\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\1\113\2\7\1\114\1\7\3\0\3\7"+
    "\10\0\1\115\10\7\1\0\2\7\1\0\1\7\1\116"+
    "\2\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\1\7\1\117\3\7\3\0\3\7\10\0"+
    "\11\7\17\0\1\120\11\0\1\121\47\0\1\17\2\104"+
    "\3\0\1\106\2\0\2\107\1\0\1\17\76\0\1\21"+
    "\53\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\7\11\0\4\7\1\122\3\0"+
    "\3\7\10\0\11\7\30\0\1\123\75\0\1\124\74\0"+
    "\1\125\74\0\1\126\74\0\1\127\44\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\1\7\1\130\3\7\3\0\3\7\10\0"+
    "\1\131\10\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\2\7\1\132\1\7\1\0\1\7\6\0\1\7"+
    "\11\0\3\7\1\133\1\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\2\7"+
    "\1\134\1\7\1\0\1\7\6\0\1\7\11\0\3\7"+
    "\1\135\1\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\1\136\3\7\1\0"+
    "\1\7\6\0\1\7\11\0\4\7\1\137\3\0\3\7"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\2\7\1\140\1\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\3\7\10\0\11\7\31\0\1\141"+
    "\74\0\1\142\73\0\1\143\1\144\44\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\2\7\1\145\1\7\1\0"+
    "\1\7\6\0\1\7\11\0\3\7\1\146\1\147\3\0"+
    "\3\7\10\0\11\7\1\0\2\7\1\0\4\7\1\0"+
    "\1\7\1\0\1\150\3\7\1\0\1\7\6\0\1\7"+
    "\11\0\1\7\1\151\3\7\3\0\3\7\10\0\11\7"+
    "\61\0\1\51\14\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\1\7"+
    "\1\152\3\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\1\153\2\7\1\154\1\7\3\0"+
    "\3\7\10\0\6\7\1\155\2\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\3\7\1\156\1\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\157\11\0\5\7\3\0"+
    "\2\7\1\160\10\0\5\7\1\161\3\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\4\7\1\162\3\0\3\7\10\0"+
    "\11\7\24\0\1\64\1\0\2\64\12\0\1\64\2\0"+
    "\1\64\15\0\1\64\11\0\21\67\2\0\1\67\3\0"+
    "\34\67\1\0\11\67\24\0\1\163\1\0\2\163\12\0"+
    "\1\163\2\0\1\163\15\0\1\163\11\0\22\72\1\0"+
    "\52\72\21\74\2\0\2\74\1\0\2\74\1\0\44\74"+
    "\22\0\1\76\122\0\1\164\30\0\1\103\5\0\1\106"+
    "\2\0\2\107\1\0\1\103\60\0\1\165\3\0\2\165"+
    "\1\0\4\165\1\0\1\165\20\0\1\165\1\0\1\165"+
    "\5\0\1\165\13\0\1\165\13\0\1\166\5\0\1\167"+
    "\2\170\2\107\1\0\1\166\57\0\1\171\1\172\12\0"+
    "\1\171\1\172\55\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\1\7"+
    "\1\173\3\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\1\7\1\174\3\7\3\0\3\7"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\3\7"+
    "\1\175\1\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\1\7\1\176\2\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\7\11\0\5\7\3\0\3\7"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\4\7"+
    "\1\177\3\0\3\7\10\0\11\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\1\7\1\200\3\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\3\7\10\0\3\7\1\201\5\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\2\7\1\202\2\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\3\7\10\0\1\203\10\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\2\7\1\204\2\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\205\11\0\5\7\3\0\3\7"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\5\7"+
    "\3\0\3\7\10\0\5\7\1\206\3\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\207\11\0\5\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\1\210"+
    "\3\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\3\7\10\0\11\7\1\0\2\7\1\0\4\7\1\0"+
    "\1\7\1\0\4\7\1\0\1\7\6\0\1\7\11\0"+
    "\5\7\3\0\3\7\10\0\1\211\10\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\212\11\0\5\7\3\0\3\7\10\0\1\7"+
    "\1\213\5\7\1\214\1\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\1\7\1\215\1\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\7\11\0\3\7\1\216\1\7"+
    "\3\0\3\7\10\0\11\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\2\7\1\217\1\7\1\0\1\7"+
    "\6\0\1\7\11\0\5\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\220\11\0\5\7\3\0\3\7"+
    "\10\0\7\7\1\221\1\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\222"+
    "\11\0\5\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\5\7\3\0\3\7\10\0\3\7"+
    "\1\223\5\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\1\7"+
    "\1\224\3\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\1\225\4\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\2\7\1\226\10\0\11\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\4\7\1\227\3\0\3\7\10\0\11\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\3\7\10\0"+
    "\10\7\1\230\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\5\7"+
    "\3\0\2\7\1\231\10\0\11\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\5\7\3\0\2\7\1\232\10\0\11\7"+
    "\26\0\1\233\52\0\1\234\3\0\2\234\1\0\4\234"+
    "\1\0\1\234\20\0\1\234\1\0\1\234\5\0\1\234"+
    "\13\0\1\234\13\0\1\166\5\0\1\235\2\170\2\107"+
    "\1\0\1\166\60\0\1\235\13\0\1\235\60\0\1\236"+
    "\5\0\1\167\2\0\2\107\1\0\1\236\60\0\1\172"+
    "\13\0\1\172\55\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\5\7"+
    "\3\0\1\7\1\220\1\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\1\237\4\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\3\7\10\0\3\7\1\240\5\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\2\7\1\241\1\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\3\7\10\0\1\7\1\242\7\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\2\7\1\243\1\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\2\7\1\244\1\7\1\0\1\7\6\0\1\7\11\0"+
    "\5\7\3\0\3\7\10\0\11\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\3\7\1\245\1\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\1\246\4\7"+
    "\3\0\3\7\10\0\11\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\1\247\2\7\10\0\11\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\3\7\10\0"+
    "\1\250\10\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\3\7"+
    "\1\251\1\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\2\7\1\252\1\7"+
    "\1\0\1\7\6\0\1\7\11\0\5\7\3\0\3\7"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\5\7"+
    "\3\0\2\7\1\253\10\0\11\7\1\0\2\7\1\0"+
    "\1\7\1\220\2\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\1\254\4\7"+
    "\3\0\3\7\10\0\11\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\3\7\10\0\1\255\10\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\2\7\1\256"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\2\7\1\257\1\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\260\11\0\5\7\3\0\3\7\10\0\3\7"+
    "\1\261\5\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\4\7"+
    "\1\220\3\0\3\7\10\0\11\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\2\7\1\262\2\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\2\7\1\111\10\0\11\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\2\7\1\263\1\7\1\0\1\7"+
    "\6\0\1\7\11\0\5\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\264\11\0\5\7\3\0\3\7"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\1\7"+
    "\1\265\3\7\3\0\3\7\10\0\11\7\4\0\1\266"+
    "\3\0\2\266\1\0\4\266\1\0\1\266\20\0\1\266"+
    "\1\0\1\266\5\0\1\266\13\0\1\266\13\0\1\267"+
    "\5\0\1\167\2\270\2\107\1\0\1\267\60\0\1\236"+
    "\5\0\1\235\2\0\2\107\1\0\1\236\55\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\220\11\0\5\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\2\7"+
    "\1\271\1\7\1\0\1\7\6\0\1\7\11\0\5\7"+
    "\3\0\3\7\10\0\11\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\1\272\4\7\3\0\3\7\10\0\11\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\273\11\0\5\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\5\7\3\0"+
    "\3\7\10\0\1\274\10\7\1\0\2\7\1\0\1\7"+
    "\1\275\2\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\5\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\7\11\0\4\7\1\276\3\0"+
    "\3\7\10\0\11\7\1\0\2\7\1\0\4\7\1\0"+
    "\1\7\1\0\4\7\1\0\1\7\6\0\1\7\11\0"+
    "\4\7\1\277\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\1\300\4\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\1\7\1\301"+
    "\3\7\3\0\3\7\10\0\11\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\5\7\3\0\3\7\10\0\4\7\1\302"+
    "\4\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\303\11\0\5\7\3\0"+
    "\3\7\10\0\11\7\1\0\2\7\1\0\1\7\1\304"+
    "\2\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\5\7\3\0\3\7\10\0\11\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\2\7\1\305"+
    "\10\0\11\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\306\11\0\5\7"+
    "\3\0\3\7\10\0\11\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\3\7\1\307\1\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\7\11\0\5\7\3\0\3\7"+
    "\10\0\1\7\1\310\7\7\1\0\2\7\1\0\4\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\311"+
    "\11\0\5\7\3\0\3\7\10\0\11\7\4\0\1\312"+
    "\3\0\2\312\1\0\4\312\1\0\1\312\20\0\1\312"+
    "\1\0\1\312\5\0\1\312\13\0\1\312\13\0\1\267"+
    "\5\0\1\235\2\270\2\107\1\0\1\267\55\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\5\7\3\0\3\7\10\0\1\7"+
    "\1\313\7\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\5\7"+
    "\3\0\2\7\1\314\10\0\11\7\1\0\2\7\1\0"+
    "\1\7\1\315\2\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\5\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\2\7\1\220\1\7\1\0\1\7\6\0\1\7\11\0"+
    "\5\7\3\0\3\7\10\0\11\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\7\11\0\1\7\1\316\3\7\3\0\3\7\10\0"+
    "\11\7\1\0\2\7\1\0\4\7\1\0\1\7\1\0"+
    "\4\7\1\0\1\7\6\0\1\7\11\0\2\7\1\317"+
    "\2\7\3\0\3\7\10\0\11\7\1\0\2\7\1\0"+
    "\4\7\1\0\1\7\1\0\4\7\1\0\1\7\6\0"+
    "\1\320\11\0\5\7\3\0\3\7\10\0\11\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\1\7\1\321\3\7\3\0"+
    "\3\7\10\0\11\7\1\0\2\7\1\0\4\7\1\0"+
    "\1\7\1\0\1\322\3\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\5\7\3\0\3\7\10\0\6\7"+
    "\1\323\2\7\1\0\2\7\1\0\1\7\1\324\2\7"+
    "\1\0\1\7\1\0\4\7\1\0\1\7\6\0\1\7"+
    "\11\0\5\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\7\11\0\5\7\3\0\3\7\10\0\6\7"+
    "\1\325\2\7\1\0\2\7\1\0\4\7\1\0\1\7"+
    "\1\0\4\7\1\0\1\7\6\0\1\7\11\0\3\7"+
    "\1\326\1\7\3\0\3\7\10\0\11\7\1\0\2\7"+
    "\1\0\4\7\1\0\1\7\1\0\4\7\1\0\1\7"+
    "\6\0\1\327\11\0\5\7\3\0\3\7\10\0\11\7"+
    "\1\0\2\7\1\0\4\7\1\0\1\7\1\0\4\7"+
    "\1\0\1\7\6\0\1\7\11\0\5\7\3\0\3\7"+
    "\10\0\1\330\10\7\1\0\2\7\1\0\4\7\1\0"+
    "\1\7\1\0\4\7\1\0\1\7\6\0\1\7\11\0"+
    "\1\7\1\331\3\7\3\0\3\7\10\0\11\7\1\0"+
    "\2\7\1\0\4\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\7\6\0\1\7\11\0\1\7\1\332\3\7\3\0"+
    "\3\7\10\0\11\7\1\0\2\7\1\0\4\7\1\0"+
    "\1\7\1\0\2\7\1\333\1\7\1\0\1\7\6\0"+
    "\1\7\11\0\5\7\3\0\3\7\10\0\11\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9211];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\12\1\2\11\6\1\4\11\12\1\6\11"+
    "\1\1\1\11\5\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\1\1\0\10\1\2\11\1\1"+
    "\5\11\11\1\4\11\17\1\1\11\2\1\1\0\1\1"+
    "\1\0\41\1\1\0\1\1\2\0\30\1\2\0\21\1"+
    "\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private boolean flag = false;
private HashSet<String> records = new HashSet<String>();
private MySymbol symbol(String token)
{
    System.err.println("Obtain token " + token + " \"" + yytext() + "\"" );
    return new MySymbol(token, yytext());
}
private MySymbol symbol(String token, Object val) {
    System.err.println( "Obtain token " + token + " \"" + yytext() + "\"" );
    return new MySymbol(token, val);
}
 StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 374) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MySymbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol("$");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                        "\" at line "+yyline+", column "+yycolumn);
            }
          case 81: break;
          case 2: 
            { String temp = yytext();
                            if(records.contains(temp)){
                                flag = false;
                                return symbol("rec_id",temp);
                            } if(flag){
                                flag = false;
                                records.add(temp);
                                return symbol("rec_id",temp);
                            }
                            return symbol("id",temp);
            }
          case 82: break;
          case 3: 
            { return symbol("-");
            }
          case 83: break;
          case 4: 
            { return symbol("int_const", Integer.valueOf(yytext()));
            }
          case 84: break;
          case 5: 
            { return symbol(".");
            }
          case 85: break;
          case 6: 
            { return symbol("+");
            }
          case 86: break;
          case 7: 
            { /* skip */return symbol("");
            }
          case 87: break;
          case 8: 
            { yybegin(STRING); string.setLength(0); string.append("\"");
            }
          case 88: break;
          case 9: 
            { return symbol("=");
            }
          case 89: break;
          case 10: 
            { return symbol("<");
            }
          case 90: break;
          case 11: 
            { return symbol(">");
            }
          case 91: break;
          case 12: 
            { return symbol("~");
            }
          case 92: break;
          case 13: 
            { return symbol("&");
            }
          case 93: break;
          case 14: 
            { return symbol("|");
            }
          case 94: break;
          case 15: 
            { return symbol("^");
            }
          case 95: break;
          case 16: 
            { return symbol("*");
            }
          case 96: break;
          case 17: 
            { return symbol("%");
            }
          case 97: break;
          case 18: 
            { return symbol("/");
            }
          case 98: break;
          case 19: 
            { return symbol("(");
            }
          case 99: break;
          case 20: 
            { return symbol(")");
            }
          case 100: break;
          case 21: 
            { return symbol(",");
            }
          case 101: break;
          case 22: 
            { return symbol(":");
            }
          case 102: break;
          case 23: 
            { return symbol(";");
            }
          case 103: break;
          case 24: 
            { return symbol("[");
            }
          case 104: break;
          case 25: 
            { return symbol("]");
            }
          case 105: break;
          case 26: 
            { yybegin(CHARACTER); return symbol("char", yytext());
            }
          case 106: break;
          case 27: 
            { string.append(yytext());
            }
          case 107: break;
          case 28: 
            { yybegin(YYINITIAL); string.append("'"); return symbol("char", string);
            }
          case 108: break;
          case 29: 
            { yybegin(YYINITIAL); string.append("\""); StringBuilder temp = string; string = new StringBuilder(); return symbol("string", temp.toString());
            }
          case 109: break;
          case 30: 
            { yybegin(YYINITIAL); StringBuilder temp = string; string = new StringBuilder(); return symbol("comment", temp.toString());
            }
          case 110: break;
          case 31: 
            { string.append("");
            }
          case 111: break;
          case 32: 
            { return symbol("--");
            }
          case 112: break;
          case 33: 
            { return symbol("-=");
            }
          case 113: break;
          case 34: 
            { return symbol("real_const", Double.valueOf(yytext()));
            }
          case 114: break;
          case 35: 
            { return symbol("++");
            }
          case 115: break;
          case 36: 
            { return symbol("+=");
            }
          case 116: break;
          case 37: 
            { yybegin(SINGLE_COMMENT); string.setLength(0); string.append("##");
            }
          case 117: break;
          case 38: 
            { return symbol("==");
            }
          case 118: break;
          case 39: 
            { return symbol("!=");
            }
          case 119: break;
          case 40: 
            { return symbol("<=");
            }
          case 120: break;
          case 41: 
            { return symbol(">=");
            }
          case 121: break;
          case 42: 
            { return symbol("of");
            }
          case 122: break;
          case 43: 
            { return symbol("or");
            }
          case 123: break;
          case 44: 
            { return symbol("*=");
            }
          case 124: break;
          case 45: 
            { return symbol("%=");
            }
          case 125: break;
          case 46: 
            { yybegin(MULT_COMMENT); string.setLength(0); string.append("/#");
            }
          case 126: break;
          case 47: 
            { return symbol("/=");
            }
          case 127: break;
          case 48: 
            { return symbol("if");
            }
          case 128: break;
          case 49: 
            { return symbol("in");
            }
          case 129: break;
          case 50: 
            { yybegin(YYINITIAL); string.append("#/"); StringBuilder temp = string; string = new StringBuilder(); return symbol("comment", temp.toString());
            }
          case 130: break;
          case 51: 
            { return symbol("int_const", yytext());
            }
          case 131: break;
          case 52: 
            { return symbol("real_const", yytext());
            }
          case 132: break;
          case 53: 
            { return symbol("len");
            }
          case 133: break;
          case 54: 
            { return symbol("for");
            }
          case 134: break;
          case 55: 
            { return symbol("end");
            }
          case 135: break;
          case 56: 
            { return symbol("and");
            }
          case 136: break;
          case 57: 
            { return symbol("new");
            }
          case 137: break;
          case 58: 
            { return symbol("not");
            }
          case 138: break;
          case 59: 
            { return symbol("base_type");
            }
          case 139: break;
          case 60: 
            { return symbol("else");
            }
          case 140: break;
          case 61: 
            { return symbol("true");
            }
          case 141: break;
          case 62: 
            { return symbol("auto");
            }
          case 142: break;
          case 63: 
            { return symbol("case");
            }
          case 143: break;
          case 64: 
            { return symbol("void");
            }
          case 144: break;
          case 65: 
            { return symbol("false");
            }
          case 145: break;
          case 66: 
            { return symbol("begin");
            }
          case 146: break;
          case 67: 
            { return symbol("break");
            }
          case 147: break;
          case 68: 
            { return symbol("input");
            }
          case 148: break;
          case 69: 
            { return symbol("until");
            }
          case 149: break;
          case 70: 
            { return symbol("const");
            }
          case 150: break;
          case 71: 
            { return symbol("return");
            }
          case 151: break;
          case 72: 
            { flag = true; return symbol("record");
            }
          case 152: break;
          case 73: 
            { return symbol("repeat");
            }
          case 153: break;
          case 74: 
            { return symbol("sizeof");
            }
          case 154: break;
          case 75: 
            { return symbol("switch");
            }
          case 155: break;
          case 76: 
            { return symbol("foreach");
            }
          case 156: break;
          case 77: 
            { return symbol("default");
            }
          case 157: break;
          case 78: 
            { return symbol("println");
            }
          case 158: break;
          case 79: 
            { return symbol("function");
            }
          case 159: break;
          case 80: 
            { return symbol("continue");
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


  public MySymbol currentToken() {
    return currentSymbol;
  }

  public String nextToken() {
    try {
      currentSymbol = next_token();
      return currentSymbol.getToken();
    } catch (IOException e) {
      throw new RuntimeException("Unable to get next token", e);
    }
  }
}
